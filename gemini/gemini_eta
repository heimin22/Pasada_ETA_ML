import joblib
from pathlib import Path
import json
import requests
import pandas as pd
from datetime import datetime

def load_transport_runs():
    # load and cache the processed transport data
    data_path = Path(__file__).parent.parent / 'data' / 'processed' / 'processed_transport_runs.csv'
    if data_path.exists():
        return pd.read_csv(data_path)
    return None

def get_historical_stats(df, pick_up, drop_off, time_str):
    # calculate historical stats for a given route and time
    try:
        # convert input time to minutes
        time = datetime.strptime(time_str, '%I:%M%p')
        time_minutes = time.hour * 60 + time.minute
        
        # filter relevant routes
        routes_data = df[(df['pick_up'] == pick_up) & (df['drop_off'] == drop_off)]
        
        if routes_data.empty:
            return None
        
        # calculate statistics
        stats = {
            'avg_travel_time': route_data['lap_minutes'].mean(),
            'min_travel_time': route_data['lap_minutes'].min(),
            'max_travel_time': route_data['lap_minutes'].max(),
            'common_traffic': route_data['traffic'].mode().iloc[0]
        }
        
        return stats
    except Exception as e:
        return None
    

def gemini_eta_predict(user_input, api_key):
    # load the ETA model
    model_path = Path(__file__).parent.parent / 'models' / 'eta_model.pkl'
    model = joblib.load(model_path)
    
    uri = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"
    headers = {"Content-Type": "application/json"}
    
    # get ETA prediction
    try:
        features = json.loads(user_input)
        eta_prediction = float(model.predict([features])[0])
        
        # make API request to Gemini
        enhanced_prompt = f"{eta_prediction:.2f} m, {user_input}"
        
        data = {
            "contents": [{
                "parts": [{"text": enhanced_prompt}]
            }]
        }
        
        response = requests.post(uri, headers=headers, json=data)
        response.raise_for_status()
        
        return {
            "eta_prediction": eta_prediction,
            "gemini_response": response.json()["candidates"][0]["content"]["parts"][0]["text"]
        }
    except Exception as e:
        return {
            "eta_prediction": None,
            "gemini_response": f"An error occurred: {str(e)}"
        }
        
    
